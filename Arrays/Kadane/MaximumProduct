Maximum Product Subarray
=========================
Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.
Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Approach : Kadane's Algorithm

class Solution {
    public int maxProduct(int[] nums) { 
        int prod = nums[0], maxProd = nums[0], minProd = nums[0];
        for(int i = 1; i < nums.length; i++){
            if(nums[i] < 0){
                int temp = maxProd;
                maxProd = minProd;
                minProd = temp;
            }
            maxProd = Math.max(nums[i], maxProd*nums[i]);
            minProd = Math.min(nums[i], minProd*nums[i]);
            prod = Math.max(prod, maxProd);
        }
        return prod;
    }
}

Time Complexity : O(N)

Note: Classic Kadane works but it fails to handle negative numbers
