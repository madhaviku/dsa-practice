Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3
Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
  
Approach: Moor's Voting Algorithm
  
class Solution {
    public int majorityElement(int[] nums) {
        int freq = 0, ele = 0;
        for(int i = 0; i < nums.length; i++){
            if(freq == 0){
                ele = nums[i];
            }else if(nums[i] == ele){
                freq++;
            }else freq--;
        }
        return ele;       
    }
}

Time Complexity : O(N)

Approach 2
I can use HashMap and keep count of occurance of the element. 
Then in second swap I can predict whichever count is higher, i can return it or while in first loop itself I can keep the track of highest occurence and return.
