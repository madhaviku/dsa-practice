 Target Sum

You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

Solution
========
class Solution {
    int[] nums; int target;
    private int targetSumCount(int idx, int sum){
        if(idx == nums.length){
            return sum == target ? 1 : 0;
        }
        int plus = targetSumCount(idx+1, sum+nums[idx]);
        int minus = targetSumCount(idx+1, sum - nums[idx]);

        return plus + minus;
    }
    public int findTargetSumWays(int[] nums, int target) {
        this.nums = nums;
        this.target = target;
        return targetSumCount(0, 0);
    }
}
