Unique Paths

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

class Solution {
    int m;
    int n;
    HashMap<String, Integer> cache = new HashMap<>();
    private int allPaths(int i, int j){
        if(i >= m || j >= n) return 0;
        if(i == m-1 && j == n-1) return 1;
        String pair = i+","+j;
        if(cache.containsKey(pair)) return cache.get(pair);

        cache.put(pair, allPaths(i+1, j) + allPaths(i, j+1));
        return cache.get(pair);
    }
    public int uniquePaths(int m, int n) {
        this.m = m;
        this.n = n;
        return allPaths(0, 0);
    }
}
