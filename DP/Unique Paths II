Unique Paths II

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

class Solution {
    int[][] obstacleGrid;
    int m , n;
    HashMap<String, Integer> dp = new HashMap<>();
    private int paths(int i, int j){
        if(i >= m || j >= n || obstacleGrid[i][j] == 1) return 0;
        if(i == m-1 && j == n-1) return 1;
        String pair = i+","+j;
        if(dp.containsKey(pair)) return dp.get(pair);

        dp.put(pair, paths(i+1, j) + paths(i, j+1));
        return dp.get(pair);
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        this.obstacleGrid = obstacleGrid;
        m = obstacleGrid.length;
        n = obstacleGrid[0].length;
        return paths(0,0);
    }
}

 
