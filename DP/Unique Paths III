Unique Paths III

You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

class Solution {
    int[][] grid;
    int paths = 0;
    int squares = 0;
    private void getPaths(int i, int j, int count){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == -1 || grid[i][j] == 5) return;

        if(grid[i][j] == 2){
            if(count == squares) paths++;
            return;
        }

        int num = grid[i][j];
        grid[i][j] = 5;

        getPaths(i+1, j, count+1);
        getPaths(i, j+1, count+1);
        getPaths(i-1, j, count+1);
        getPaths(i, j-1, count+1);

        grid[i][j] = num;
    }
    public int uniquePathsIII(int[][] grid) {
        this.grid = grid;
        int r = 0, c = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] != -1) squares++;
                if(grid[i][j] == 1){
                    r = i;
                    c = j; 
                }
            }
        }

        getPaths(r, c, 1);
        return paths;
    }
}
