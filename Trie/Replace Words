Replace Words
In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. 
For example, when the root "help" is followed by the word "ful", we can form a derivative "helpful".
Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. 
If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.
Return the sentence after the replacement.

Example 1:
Input: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"
Output: "the cat was rat by the bat"
Example 2:
Input: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"
Output: "a a b c"

class Trie{
    Trie child[];
    boolean eow;
    String str;
    Trie(){
        child = new Trie[26];
        str = "";
    }
}
class Solution {
    Trie root = new Trie();
    private void constructTrie(String word){
        Trie curr = root;
        for(char c : word.toCharArray()){
            int idx = c - 'a';
            if(curr.child[idx] == null){
                curr.child[idx] = new Trie();
            }
            curr = curr.child[idx];
        }
        curr.eow = true;
        curr.str = word;
    }
    private String search(String word){
        Trie curr = root;
        for(char c : word.toCharArray()){
            int idx = c - 'a';
            if(curr.child[idx] == null){
                break;
            }
            curr = curr.child[idx];
            if(curr.eow) return curr.str;
        }
        return word;
    }
    public String replaceWords(List<String> dictionary, String sentence) {
        for(String word : dictionary){
            constructTrie(word);
        }
        StringBuilder sb = new StringBuilder();
        String[] words = sentence.split(" ");
        for(String word : words){
            sb.append(search(word)).append(',');
        }
        return sb.toString().replace(",", " ").trim();
    }
}
